#!/bin/bash

# =============================================================================
# Ideas ÁÆ°ÁêÜÈ°µÈù¢Êï∞ÊçÆÁ±ªÂûãÈîôËØØÁªºÂêàË∞ÉËØïËÑöÊú¨
# ÈîôËØØ: q.some is not a function at InternalTable.js:104:17
# 
# ÂàÜÊûê: antd Table ÁªÑ‰ª∂ÊúüÊúõÊï∞ÁªÑÊï∞ÊçÆÔºå‰ΩÜÊî∂Âà∞‰∫ÜÈùûÊï∞ÁªÑÊï∞ÊçÆ
# =============================================================================

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# VPSÈÖçÁΩÆ
VPS_IP="45.149.156.216"
VPS_PORT="3001"
API_BASE="http://${VPS_IP}:${VPS_PORT}/api"

echo -e "${PURPLE}=================================================================================="
echo -e "üîç Ideas ÁÆ°ÁêÜÈ°µÈù¢Êï∞ÊçÆÁ±ªÂûãÈîôËØØ - ÁªºÂêàË∞ÉËØïËÑöÊú¨"
echo -e "ÈîôËØØ: TypeError: q.some is not a function at InternalTable.js:104:17"
echo -e "Êó∂Èó¥: $(date)"
echo -e "==================================================================================${NC}\n"

# =============================================================================
# 1. ÈîôËØØÂàÜÊûêÂíåËØäÊñ≠ÊµÅÁ®ã
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§1: ÈîôËØØÂàÜÊûê${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîπ ÈîôËØØ‰ΩçÁΩÆ: antd/es/table/InternalTable.js:104:17"
echo "üîπ ÈîôËØØÂéüÂõ†: rawData.some() Ë¢´Ë∞ÉÁî®Ôºå‰ΩÜ rawData ‰∏çÊòØÊï∞ÁªÑ"
echo "üîπ È¢ÑÊúüË°å‰∏∫: Ideas API Â∫îËØ•ËøîÂõûÊï∞ÁªÑÊ†ºÂºèÁöÑÊï∞ÊçÆ"
echo "üîπ ÂÆûÈôÖÈóÆÈ¢ò: ÂâçÁ´ØÊî∂Âà∞ÁöÑÊï∞ÊçÆ‰∏çÊòØÊï∞ÁªÑÊ†ºÂºè"
echo ""

# =============================================================================
# 2. ÂêéÁ´ØAPIÊ£ÄÊü•
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§2: ÂêéÁ´ØAPIÊ£ÄÊü•${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo -e "${YELLOW}üåê ÊµãËØïÂêéÁ´ØIdeas APIÂìçÂ∫î...${NC}"

# Ê£ÄÊü•ÂêéÁ´ØÊúçÂä°Áä∂ÊÄÅ
echo "1Ô∏è‚É£  Ê£ÄÊü•ÂêéÁ´ØÊúçÂä°ÂÅ•Â∫∑Áä∂ÊÄÅ:"
if curl -s "${API_BASE}/ideas/health" &>/dev/null; then
    echo -e "   ${GREEN}‚úÖ ÂêéÁ´ØÊúçÂä°ËøêË°åÊ≠£Â∏∏${NC}"
else
    echo -e "   ${RED}‚ùå ÂêéÁ´ØÊúçÂä°Êó†Ê≥ïËÆøÈóÆ${NC}"
    echo "   ËØ∑Ê£ÄÊü•: systemctl status research-backend"
fi

echo ""
echo "2Ô∏è‚É£  Áõ¥Êé•Ë∞ÉÁî®Ideas API:"
API_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nCONTENT_TYPE:%{content_type}\n" "${API_BASE}/ideas/" 2>/dev/null)

if [ $? -eq 0 ]; then
    HTTP_CODE=$(echo "$API_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
    CONTENT_TYPE=$(echo "$API_RESPONSE" | grep "CONTENT_TYPE:" | cut -d: -f2)
    RESPONSE_BODY=$(echo "$API_RESPONSE" | sed '/HTTP_CODE:/,$d')
    
    echo "   HTTPÁä∂ÊÄÅÁ†Å: $HTTP_CODE"
    echo "   ÂÜÖÂÆπÁ±ªÂûã: $CONTENT_TYPE"
    echo ""
    echo "   ÂéüÂßãÂìçÂ∫îÂÜÖÂÆπ:"
    echo "$RESPONSE_BODY" | jq . 2>/dev/null || echo "$RESPONSE_BODY"
    echo ""
    
    # ÂàÜÊûêÂìçÂ∫îÁªìÊûÑ
    echo "3Ô∏è‚É£  ÂìçÂ∫îÁªìÊûÑÂàÜÊûê:"
    if echo "$RESPONSE_BODY" | jq -e 'type' &>/dev/null; then
        RESPONSE_TYPE=$(echo "$RESPONSE_BODY" | jq -r 'type')
        echo "   ÂìçÂ∫îÊï∞ÊçÆÁ±ªÂûã: $RESPONSE_TYPE"
        
        if [ "$RESPONSE_TYPE" = "array" ]; then
            ITEM_COUNT=$(echo "$RESPONSE_BODY" | jq 'length')
            echo -e "   ${GREEN}‚úÖ ÂìçÂ∫îÊòØÊï∞ÁªÑÔºåÂåÖÂê´ $ITEM_COUNT ‰∏™È°πÁõÆ${NC}"
        elif [ "$RESPONSE_TYPE" = "object" ]; then
            echo -e "   ${YELLOW}‚ö†Ô∏è  ÂìçÂ∫îÊòØÂØπË±°Ôºå‰∏çÊòØÊï∞ÁªÑ${NC}"
            echo "   ÂØπË±°ÁªìÊûÑ:"
            echo "$RESPONSE_BODY" | jq 'keys' 2>/dev/null
            
            # Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´dataÂ≠óÊÆµ
            if echo "$RESPONSE_BODY" | jq -e '.data' &>/dev/null; then
                DATA_TYPE=$(echo "$RESPONSE_BODY" | jq -r '.data | type')
                echo "   .dataÂ≠óÊÆµÁ±ªÂûã: $DATA_TYPE"
                if [ "$DATA_TYPE" = "array" ]; then
                    DATA_COUNT=$(echo "$RESPONSE_BODY" | jq '.data | length')
                    echo -e "   ${GREEN}‚úÖ .dataÂ≠óÊÆµÊòØÊï∞ÁªÑÔºåÂåÖÂê´ $DATA_COUNT ‰∏™È°πÁõÆ${NC}"
                else
                    echo -e "   ${RED}‚ùå .dataÂ≠óÊÆµ‰∏çÊòØÊï∞ÁªÑ: $DATA_TYPE${NC}"
                fi
            fi
        else
            echo -e "   ${RED}‚ùå ÂìçÂ∫îÊó¢‰∏çÊòØÊï∞ÁªÑ‰πü‰∏çÊòØÂØπË±°: $RESPONSE_TYPE${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå ÂìçÂ∫î‰∏çÊòØÊúâÊïàÁöÑJSONÊ†ºÂºè${NC}"
    fi
else
    echo -e "   ${RED}‚ùå APIËØ∑Ê±ÇÂ§±Ë¥•${NC}"
fi

echo ""

# =============================================================================
# 3. Êï∞ÊçÆÂ∫ìÊï∞ÊçÆÊ£ÄÊü•
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§3: Êï∞ÊçÆÂ∫ìÊï∞ÊçÆÊ£ÄÊü•${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "1Ô∏è‚É£  Ê£ÄÊü•IdeasË°®ÁªìÊûÑÂíåÊï∞ÊçÆ:"
if [ -f "backend/data/research_dashboard.db" ]; then
    echo "   Êï∞ÊçÆÂ∫ìÊñá‰ª∂Â≠òÂú®"
    
    # Ê£ÄÊü•IdeasË°®ÁªìÊûÑ
    echo "   IdeasË°®ÁªìÊûÑ:"
    sqlite3 backend/data/research_dashboard.db ".schema ideas" 2>/dev/null || echo "   Ë°®‰∏çÂ≠òÂú®ÊàñÊó†Ê≥ïËÆøÈóÆ"
    
    # Ê£ÄÊü•Êï∞ÊçÆ
    echo ""
    echo "   IdeasÊï∞ÊçÆÁªüËÆ°:"
    IDEA_COUNT=$(sqlite3 backend/data/research_dashboard.db "SELECT COUNT(*) FROM ideas;" 2>/dev/null || echo "0")
    echo "   ÊÄªËÆ∞ÂΩïÊï∞: $IDEA_COUNT"
    
    if [ "$IDEA_COUNT" -gt 0 ]; then
        echo ""
        echo "   ÊúÄÊñ∞5Êù°ËÆ∞ÂΩï:"
        sqlite3 -header backend/data/research_dashboard.db "SELECT id, project_name, responsible_person, maturity, created_at FROM ideas ORDER BY created_at DESC LIMIT 5;" 2>/dev/null || echo "   Êó†Ê≥ïÊü•ËØ¢Êï∞ÊçÆ"
    fi
else
    echo -e "   ${RED}‚ùå Êï∞ÊçÆÂ∫ìÊñá‰ª∂‰∏çÂ≠òÂú®${NC}"
fi

echo ""

# =============================================================================
# 4. ÂâçÁ´Ø‰ª£Á†ÅÂàÜÊûê
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§4: ÂâçÁ´Ø‰ª£Á†ÅÂàÜÊûê${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "1Ô∏è‚É£  Ê£ÄÊü•ÂâçÁ´ØÂÖ≥ÈîÆÊñá‰ª∂:"

# Ê£ÄÊü•IdeasManagement.tsx‰∏≠ÁöÑÊï∞ÊçÆÈ™åËØÅÈÄªËæë
echo "   Ê£ÄÊü• IdeasManagement.tsx Êï∞ÊçÆÈ™åËØÅ:"
if grep -n "Array.isArray" frontend/src/pages/IdeasManagement.tsx &>/dev/null; then
    echo -e "   ${GREEN}‚úÖ ÂèëÁé∞Êï∞ÁªÑÈ™åËØÅÈÄªËæë${NC}"
    grep -n -A 3 -B 1 "Array.isArray" frontend/src/pages/IdeasManagement.tsx
else
    echo -e "   ${YELLOW}‚ö†Ô∏è  Êú™ÂèëÁé∞Êï∞ÁªÑÈ™åËØÅÈÄªËæë${NC}"
fi

echo ""
echo "   Ê£ÄÊü• apiOptimized.ts getIdeasSafeÊñπÊ≥ï:"
if grep -n -A 10 "getIdeasSafe" frontend/src/services/apiOptimized.ts &>/dev/null; then
    echo -e "   ${GREEN}‚úÖ ÂèëÁé∞ getIdeasSafe ÊñπÊ≥ï${NC}"
    grep -n -A 10 "getIdeasSafe" frontend/src/services/apiOptimized.ts
else
    echo -e "   ${RED}‚ùå Êú™ÂèëÁé∞ getIdeasSafe ÊñπÊ≥ï${NC}"
fi

echo ""
echo "   Ê£ÄÊü• handleListResponse ÂáΩÊï∞:"
if grep -n -A 15 "handleListResponse.*=" frontend/src/utils/dataFormatters.ts &>/dev/null; then
    echo -e "   ${GREEN}‚úÖ ÂèëÁé∞ handleListResponse ÂáΩÊï∞${NC}"
    echo "   ÂáΩÊï∞ÈÄªËæëÈ¢ÑËßà:"
    grep -n -A 5 "handleListResponse.*=" frontend/src/utils/dataFormatters.ts
else
    echo -e "   ${RED}‚ùå Êú™ÂèëÁé∞ handleListResponse ÂáΩÊï∞${NC}"
fi

echo ""

# =============================================================================
# 5. ÁΩëÁªúËØ∑Ê±ÇÊ®°ÊãüÊµãËØï
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§5: Ê®°ÊãüÂâçÁ´ØËØ∑Ê±ÇÊµÅÁ®ã${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "1Ô∏è‚É£  Ê®°ÊãüÂ∏¶TokenÁöÑËØ∑Ê±Ç (Â¶ÇÊûúÊúâËÆ§ËØÅ):"

# Ê£ÄÊü•ÊòØÂê¶ÊúâtokenÁ§∫‰æã
if [ -f "frontend/.env" ] && grep -q "TOKEN" frontend/.env; then
    echo "   ÂèëÁé∞ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂ÔºåÂèØËÉΩÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØ"
fi

# Ê®°ÊãüCORSÂíåÂÆåÊï¥ÁöÑAPIËØ∑Ê±Ç
echo ""
echo "2Ô∏è‚É£  ÊµãËØïÂÆåÊï¥ÁöÑAPIËØ∑Ê±ÇÊµÅÁ®ã:"
echo "   ËØ∑Ê±ÇURL: ${API_BASE}/ideas/"
echo "   ËØ∑Ê±ÇÊñπÊ≥ï: GET"
echo "   ËØ∑Ê±ÇÂ§¥: application/json"

FULL_RESPONSE=$(curl -s -H "Content-Type: application/json" \
                      -H "Accept: application/json" \
                      -w "\n---CURL_INFO---\nHTTP_CODE:%{http_code}\nTIME_TOTAL:%{time_total}\nSIZE_DOWNLOAD:%{size_download}\n" \
                      "${API_BASE}/ideas/" 2>/dev/null)

if [ $? -eq 0 ]; then
    HTTP_CODE=$(echo "$FULL_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
    TIME_TOTAL=$(echo "$FULL_RESPONSE" | grep "TIME_TOTAL:" | cut -d: -f2)
    SIZE_DOWNLOAD=$(echo "$FULL_RESPONSE" | grep "SIZE_DOWNLOAD:" | cut -d: -f2)
    RESPONSE_BODY=$(echo "$FULL_RESPONSE" | sed '/---CURL_INFO---/,$d')
    
    echo "   ÂìçÂ∫îÊó∂Èó¥: ${TIME_TOTAL}s"
    echo "   ‰∏ãËΩΩÂ§ßÂ∞è: ${SIZE_DOWNLOAD} bytes"
    echo "   HTTPÁä∂ÊÄÅ: $HTTP_CODE"
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ APIËØ∑Ê±ÇÊàêÂäü${NC}"
    else
        echo -e "   ${RED}‚ùå APIËØ∑Ê±ÇÂ§±Ë¥•ÔºåÁä∂ÊÄÅÁ†Å: $HTTP_CODE${NC}"
    fi
fi

echo ""

# =============================================================================
# 6. ÈóÆÈ¢òËØäÊñ≠Âíå‰øÆÂ§çÂª∫ËÆÆ
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§6: ÈóÆÈ¢òËØäÊñ≠Âíå‰øÆÂ§çÂª∫ËÆÆ${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "üîç Ê†πÊçÆÊ£ÄÊü•ÁªìÊûúËØäÊñ≠ÈóÆÈ¢ò:"
echo ""

# Âü∫‰∫éÂâçÈù¢ÁöÑÊ£ÄÊü•ÁªìÊûúÁªôÂá∫Âª∫ËÆÆ
if [ "$HTTP_CODE" = "200" ] && echo "$RESPONSE_BODY" | jq -e 'type' &>/dev/null; then
    RESPONSE_TYPE=$(echo "$RESPONSE_BODY" | jq -r 'type')
    
    if [ "$RESPONSE_TYPE" = "array" ]; then
        echo -e "${GREEN}‚úÖ ÂêéÁ´ØAPIËøîÂõûÊ≠£Á°ÆÁöÑÊï∞ÁªÑÊ†ºÂºè${NC}"
        echo "üîß ÂèØËÉΩÁöÑÈóÆÈ¢ò:"
        echo "   1. ÂâçÁ´ØaxiosÂìçÂ∫îÊã¶Êà™Âô®Â§ÑÁêÜÊúâËØØ"
        echo "   2. handleListResponseÂáΩÊï∞Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãËøîÂõûÈùûÊï∞ÁªÑ"
        echo "   3. React QueryÁºìÂ≠ò‰∫ÜÈîôËØØÁöÑÊï∞ÊçÆÊ†ºÂºè"
        echo ""
        echo "üí° Âª∫ËÆÆ‰øÆÂ§çÊñπÊ°à:"
        echo "   1. Âú®IdeasManagement.tsx‰∏≠Â¢ûÂº∫Êï∞ÁªÑÈ™åËØÅ"
        echo "   2. Âú®getIdeasSafeÊñπÊ≥ï‰∏≠Ê∑ªÂä†Âº∫Âà∂Êï∞ÁªÑËΩ¨Êç¢"
        echo "   3. Ê∏ÖÈô§React QueryÁºìÂ≠ò"
        
    elif [ "$RESPONSE_TYPE" = "object" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ÂêéÁ´ØAPIËøîÂõûÂØπË±°Ê†ºÂºèÔºåÈúÄË¶ÅÊï∞ÊçÆÊèêÂèñ${NC}"
        
        if echo "$RESPONSE_BODY" | jq -e '.data | type' &>/dev/null; then
            DATA_TYPE=$(echo "$RESPONSE_BODY" | jq -r '.data | type')
            if [ "$DATA_TYPE" = "array" ]; then
                echo "üîß ÈóÆÈ¢òÁ°ÆËÆ§: Êï∞ÊçÆÂú®.dataÂ≠óÊÆµ‰∏≠Ôºå‰ΩÜÂèØËÉΩÊèêÂèñÂ§±Ë¥•"
            else
                echo "üîß ÈóÆÈ¢òÁ°ÆËÆ§: .dataÂ≠óÊÆµ‰∏çÊòØÊï∞ÁªÑ"
            fi
        else
            echo "üîß ÈóÆÈ¢òÁ°ÆËÆ§: ÂìçÂ∫îÂØπË±°Ê≤°Êúâ.dataÂ≠óÊÆµ"
        fi
        
        echo ""
        echo "üí° Âª∫ËÆÆ‰øÆÂ§çÊñπÊ°à:"
        echo "   1. ‰øÆÂ§çÂêéÁ´ØAPIÔºåÁõ¥Êé•ËøîÂõûÊï∞ÁªÑ"
        echo "   2. ‰øÆÂ§çÂâçÁ´ØÂìçÂ∫îÂ§ÑÁêÜÈÄªËæë"
        echo "   3. Á°Æ‰øùhandleListResponseÊ≠£Á°ÆÊèêÂèñÊï∞ÊçÆ"
    else
        echo -e "${RED}‚ùå ÂêéÁ´ØAPIËøîÂõûÊ†ºÂºèÈîôËØØ${NC}"
        echo "üí° Âª∫ËÆÆ‰øÆÂ§çÊñπÊ°à:"
        echo "   1. Ê£ÄÊü•ÂêéÁ´Øideas.pyË∑ØÁî±ÂÆûÁé∞"
        echo "   2. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊü•ËØ¢ÁªìÊûú"
        echo "   3. È™åËØÅÂ∫èÂàóÂåñÈÄªËæë"
    fi
else
    echo -e "${RED}‚ùå APIËØ∑Ê±ÇÂ§±Ë¥•ÊàñËøîÂõûÊó†ÊïàJSON${NC}"
    echo "üí° Âª∫ËÆÆ‰øÆÂ§çÊñπÊ°à:"
    echo "   1. Ê£ÄÊü•ÂêéÁ´ØÊúçÂä°Áä∂ÊÄÅ"
    echo "   2. Ê£ÄÊü•ÁΩëÁªúËøûÊé•"
    echo "   3. Ê£ÄÊü•APIË∑ØÂæÑÈÖçÁΩÆ"
fi

echo ""

# =============================================================================
# 7. ÁîüÊàê‰øÆÂ§çËÑöÊú¨
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§7: ÁîüÊàêËá™Âä®‰øÆÂ§çËÑöÊú¨${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# ÂàõÂª∫‰øÆÂ§çËÑöÊú¨
cat > fix-ideas-data-type.sh << 'EOF'
#!/bin/bash

# Ideas Êï∞ÊçÆÁ±ªÂûãÈîôËØØ‰øÆÂ§çËÑöÊú¨
echo "üîß ÂºÄÂßã‰øÆÂ§ç Ideas Êï∞ÊçÆÁ±ªÂûãÈîôËØØ..."

# 1. Ê∏ÖÈô§ÂâçÁ´ØÊûÑÂª∫ÁºìÂ≠ò
echo "1Ô∏è‚É£ Ê∏ÖÈô§ÂâçÁ´ØÁºìÂ≠ò..."
cd frontend
rm -rf node_modules/.cache
rm -rf build
npm run build

# 2. ÈáçÂêØÂêéÁ´ØÊúçÂä°
echo "2Ô∏è‚É£ ÈáçÂêØÂêéÁ´ØÊúçÂä°..."
systemctl restart research-backend

# 3. È™åËØÅ‰øÆÂ§ç
echo "3Ô∏è‚É£ È™åËØÅ‰øÆÂ§ç..."
sleep 5
curl -s http://45.149.156.216:3001/api/ideas/ | jq 'type'

echo "‚úÖ ‰øÆÂ§çÂÆåÊàê"
EOF

chmod +x fix-ideas-data-type.sh

echo -e "${GREEN}‚úÖ ‰øÆÂ§çËÑöÊú¨Â∑≤ÁîüÊàê: fix-ideas-data-type.sh${NC}"
echo ""

# =============================================================================
# 8. ÂÆûÊó∂ÁõëÊéßÂíåÊó•Âøó
# =============================================================================
echo -e "${CYAN}üìã Ê≠•È™§8: Êü•ÁúãÁõ∏ÂÖ≥Êó•Âøó${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "1Ô∏è‚É£ ÂêéÁ´ØÊúçÂä°Êó•Âøó (ÊúÄÊñ∞20Ë°å):"
journalctl -u research-backend -n 20 --no-pager 2>/dev/null || echo "   Êó†Ê≥ïËé∑ÂèñÊúçÂä°Êó•Âøó"

echo ""
echo "2Ô∏è‚É£ Âª∫ËÆÆÁöÑÁõëÊéßÂëΩ‰ª§:"
echo "   ÂÆûÊó∂Êü•ÁúãÂêéÁ´ØÊó•Âøó: journalctl -u research-backend -f"
echo "   Ê£ÄÊü•Ideas API: curl -s http://45.149.156.216:3001/api/ideas/ | jq ."
echo "   Êü•ÁúãÊúçÂä°Áä∂ÊÄÅ: systemctl status research-backend"

echo ""

# =============================================================================
# 9. ÊÄªÁªìÊä•Âëä
# =============================================================================
echo -e "${PURPLE}=================================================================================="
echo -e "üìä Ë∞ÉËØïÊÄªÁªìÊä•Âëä"
echo -e "==================================================================================${NC}"

echo -e "${YELLOW}üéØ ÈóÆÈ¢òÊ¶ÇË¶Å:${NC}"
echo "   ÈîôËØØ: TypeError: q.some is not a function"
echo "   ‰ΩçÁΩÆ: antd InternalTable.js:104:17"
echo "   ÂéüÂõ†: TableÁªÑ‰ª∂Êî∂Âà∞ÈùûÊï∞ÁªÑÊï∞ÊçÆ"
echo ""

echo -e "${YELLOW}üîç Ê£ÄÊü•ÁªìÊûú:${NC}"
if [ "$HTTP_CODE" = "200" ]; then
    echo -e "   APIÁä∂ÊÄÅ: ${GREEN}Ê≠£Â∏∏${NC}"
else
    echo -e "   APIÁä∂ÊÄÅ: ${RED}ÂºÇÂ∏∏${NC}"
fi

if [ -f "backend/data/research_dashboard.db" ]; then
    echo -e "   Êï∞ÊçÆÂ∫ì: ${GREEN}Â≠òÂú®${NC}"
else
    echo -e "   Êï∞ÊçÆÂ∫ì: ${RED}‰∏çÂ≠òÂú®${NC}"
fi

echo ""
echo -e "${YELLOW}üìã ‰∏ã‰∏ÄÊ≠•Ë°åÂä®:${NC}"
echo "   1. ËøêË°å‰øÆÂ§çËÑöÊú¨: ./fix-ideas-data-type.sh"
echo "   2. Ê£ÄÊü•ÂâçÁ´ØÊéßÂà∂Âè∞ÈîôËØØ"
echo "   3. È™åËØÅAPIÂìçÂ∫îÊ†ºÂºè"
echo "   4. Â¶ÇÊûúÈóÆÈ¢òÊåÅÁª≠ÔºåÊ£ÄÊü•ÂâçÁ´Ø‰ª£Á†Å"
echo ""

echo -e "${YELLOW}üöÄ ÈÉ®ÁΩ≤ÂëΩ‰ª§:${NC}"
echo "   ./deploy-scripts/deploy.sh  # ÂÆåÊï¥ÈÉ®ÁΩ≤"
echo ""

echo -e "${GREEN}‚úÖ Ë∞ÉËØïËÑöÊú¨ÊâßË°åÂÆåÊàêÔºÅ${NC}"
echo -e "${PURPLE}==================================================================================${NC}"